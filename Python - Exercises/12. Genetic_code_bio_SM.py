# Rewrite genetic_code.py. You may reuse which_seqtype(). Write a new function prot2dna() that uses the back_tabledictionary in CodonTable to generate one possible DNA encoding the input sequence.
# For each input sequence print:
# - The input
# - The sequence in DNA alphabet
# - The sequence in RNA alphabet
# - The sequence in protein alphabet


#PROVIDE A SEQUENCE

intro_query = input("Enter your query sequence: ") 
query = intro_query.upper()
query_join="".join(query)
print(query_join)

#THE INPUT

def general(query):
    seq_introducida = query_join
    return (seq_introducida)

general(query)
print("This is de introduced sequence:", general(query))

#SEQUENCE IN DNA ALPHABET

def DNAalphabet(query_join):
    if any(base in query_join for base in ['K', 'N', 'R', 'S', 'I', 'M', 'Q', 'H', 'P', 'L', 'E', 'D', 'V', 'Y', 'W', 'F']):
        return "This is not a DNA sequence"
    elif any(base in query_join for base in ['A', 'C', 'T', 'G', 'U']):
        DNA_sequence = query_join.replace("U", "T")
        return DNA_sequence
    
DNAalphabet(query_join)
print("This is the DNA sequence of the introduced sequence:", DNAalphabet(query_join))


#SEQUENCE IN RNA ALPHABET

def RNAalphabet(query_join):
    if any(base in query_join for base in ['K', 'N', 'R', 'S', 'I', 'M', 'Q', 'H', 'P', 'L', 'E', 'D', 'V', 'Y', 'W', 'F']):
        return "This is not a RNA sequence"
    elif any(base in query_join for base in ['A', 'C', 'T', 'G', 'U']):
        DNA_sequence = query_join.replace("T", "U")
        return DNA_sequence
    
RNAalphabet(query_join)
print("This is the RNA sequence of the introduced sequence:", RNAalphabet(query_join))

#SEQUENCE IN PROTEIN ALPHABET

def prot2dna(query_join):
    if any (base in query_join for base in ['U','J', 'X', 'U', 'Z', 'O', 'B','Ã‘']):
        return("One or more bases are not aminoacids")
    codons_back={'K': 'AAG', 'N': 'AAT', 'T': 'ACT', 'R': 'CGT', 'S': 'TCT', 'I': 'ATT', 'M': 'ATG', 'Q': 'CAG', 'H': 'CAT', 'P': 'CCT', 'L': 'TTG', 'E': 'GAG', 'D': 'GAT',  'A': 'GCT', 'G': 'GGT', 'V': 'GTT', 'Y': 'TAT', 'C': 'TGT', 'W': 'TGG', 'F': 'TTT', None: 'TAA'}
    query_sequence = ""
    for aminoacid in query_join:
        query_sequence += codons_back[aminoacid]
    return query_sequence

prot2dna(query_join)
print("This is the DNA sequence generated by the introduced aminoacids:", prot2dna(query_join))